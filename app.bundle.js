!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n,t){},function(e,n,t){"use strict";t.r(n);t(0);function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function i(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:4;r(this,e),this.boardSize=n,this.container=null,this.cells=null,this.boardEl=null}var n,t,a;return n=e,(t=[{key:"bindToDOM",value:function(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}},{key:"drawUi",value:function(){this.checkBinding(),this.container.innerHTML='\n    <div class="grid-'.concat(this.boardSize,'-center-noGutter" data-id="board"></div>\n    '),this.boardEl=this.container.querySelector("[data-id=board]");for(var e=0;e<Math.pow(this.boardSize,2);e+=1){var n=document.createElement("div");n.classList.add("col"),n.innerHTML='<div class="cell" data-id="cell_'.concat(e,'"></div>'),this.boardEl.insertAdjacentElement("beforeEnd",n)}}},{key:"checkBinding",value:function(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}},{key:"getBorderSize",value:function(){return this.boardSize}}])&&i(n.prototype,t),a&&i(n,a),e}();function o(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.char=null}var n,t,r;return n=e,(t=[{key:"creatChar",value:function(){this.char=document.createElement("img"),this.char.src="src/img/goblin.png",this.char.alt="goblin"}},{key:"getChar",value:function(){return this.char}}])&&o(n.prototype,t),r&&o(n,r),e}();function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(n,t){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.gamePlay=n,this.indexCell=null,this.char=t}var n,t,r;return n=e,(t=[{key:"getIndex",value:function(){return Math.floor(Math.random()*Math.pow(this.gamePlay.getBorderSize(),2))}},{key:"getNewIndex",value:function(){var e=this.getIndex();this.indexCell===e&&(e=this.getIndex()),this.indexCell=e}},{key:"movingChar",value:function(){this.getNewIndex();var e="[data-id=cell_".concat(this.indexCell,"]");document.querySelector(e).insertAdjacentElement("beforeEnd",this.char)}},{key:"movingCharSetInterval",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3;this.gamePlay.drawUi(),this.movingChar(),setInterval((function(){e.movingChar()}),n)}}])&&c(n.prototype,t),r&&c(n,r),e}();console.log("it works!");var s=new a;s.bindToDOM(document.querySelector(".container"));var f=new l;f.creatChar(),new u(s,f.getChar()).movingCharSetInterval();t.p}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,